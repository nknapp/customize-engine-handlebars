## Usage

The following examples demonstrate how to use this module. The following files are involved:

{{{dirTree 'examples/' }}}

### Configuration

The following usage example has a configuration for all possible properties
of the Handlebars-engine:

{{{example 'examples/example.js'}}}

This example loads its configuration from the module `config-module.js`:

{{{include 'examples/config-module.js'}}}

*A quick note: If your are creating a real configuration-module, you should always
use `require.resolve` or `__dirname` to determine the correct path to referenced files.*

All the templates in the `templates` directory are called with the provided `data` (name and city).
Each one generates an entry in the result of the engine. The templates call a partial that is 
inserted below the main content. Helper functions from the `hb-helpers.js`-file are registered 
with Handlebars and `text2.txt.hbs` uses the `shout`-helper from `hb-helpers.js` to turn a 
string into upper-case. 

{{{include 'examples/templates/text2.txt.hbs'}}}

The example also includes a preprocessor (`hb-preprocessor.js`) that calls 
[the github API](https://developer.github.com/v3/users/#get-a-single-user)
to retrieve information about the user. 

{{{include 'examples/hb-preprocessor.js'}}}

The result is injected into the data as `github` property and rendered by 
the `footer.hbs` partial.

{{{include 'examples/partials/footer.hbs'}}}

The output of this example is:

{{{exec 'node -r "../.thought/stable-console" example.js' cwd='examples/'}}}


### Customizing configurations

We can use the mechanism of {{npm 'customize'}} to adapt the configuration.
In the following example, we replace the `footer.hbs`-partial by a different version.
We do this by specifying a new partial directory. Partials with the same name as in 
the previous directory will overwrite the old one.

{{{example 'examples/example-merge.js'}}}

The new `footer.hbs` writes only the current temperature, instead of the weather description

{{{include 'examples/partials2/footer.hbs'}}}

The output of this example is

{{{exec 'node -r "../.thought/stable-console" example-merge.js' cwd='examples/'}}}

In a similar fashion, we could replace other parts of the configuration, like templates, helpers
and the pre-processor. If we would provide a new preprocessor, it could call the old one,
by calling `this.parent(args)`

### Which partial generates what? (Method 1)

When we want to overriding parts of the output, we are looking for the correct partial to do so. 
For this purpose, the engine allows to specify a "wrapper function" for partials. This function
is called with the contents and the name of a partial and returns the new content. Programs like
`Thought` can optionally include the partial names into the output to show the user which partial
to override in order to modify a given part of the output.


{{{example 'examples/example-partial-names.js'}}}

{{{exec 'node -r "../.thought/stable-console" example-partial-names.js' cwd='examples/'}}}

### Which partial generates what? (Method 2)

Another method for gathering information about the source of parts of the output are source-locators. 
The engine incoorporates the library {{npm 'handlebars-source-locators'}} to integrate a kind of 
"source-map for the poor" into the output. Source-locators are activated by setting the option
`addSourceLocators` to `true`:

{{{example 'examples/example-source-locators.js'}}}

The output contain tags that contain location-information of the succeeding text:

* `<sl line="1" col="12" file="templates/text1.txt.hbs"></sl>text...` for text the originate from a template file
* `<sl line="1" col="0" partial="footer" file="partials2/footer.hbs"></sl>text...` for text the originate from a partial

Example output:

{{{exec 'node -r "../.thought/stable-console" example-source-locators.js' cwd='examples/'}}}




### Accessing engine and configuration helpers

The configuration and the engine itself is passed as additional parameter into each helper call:

```
module.exports = {
    function(value, options, customizeConfig) {
        console.log("handlebars", custOptions.engine)
        console.log("customizeConfig", custOptions.config)
    }
}
```

### Asynchronous helpers

The `customize-engine-handlebars` uses the {{npm 'promised-handlebars'}} package as wrapper around Handlebars.
It allows helpers to return promises instead of real values.



